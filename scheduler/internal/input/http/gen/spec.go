// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWX2/TMBD/KtHBY9RkMCHI24AxreJhUh+nCbnJdXVxbM8+d1RTvjs6u226Nds6mBBv",
	"je9yvt+fu+YOatNao1GTh+oOfD3HVsSfp7+wDiSN5gfrjEVHEmNoJrX0c2xOKD4Z1wqCCqSmD8eQA60s",
	"pke8RgddDrLhxPW5Jyf1NR8vzPR8OOJJOHrBBZ4EBT9Y6ta4n+gG7+m2pcx0gTVx+thM9wHXDgX9PV7O",
	"cEuhBoNG1zgYsGKljNit2Hfb437rcAYVvCl6QYu1msUkZTFehzdBOmyguuQutxXyHYw5KOHpWy9y38PV",
	"MGNf4rv7vL024CHBJlsKUIeWcd0EDMjYXNCaa+bR5Qopns6EVLgLZWuHKNHMxIslKY5N6jk2QaHLTi7O",
	"IYclOh9nAo5G5aiMOCxqYSVU8H5Ujo4iWzSPHRULM40/rjFah7kRPFNsRzhDGnOcX3CiRULnobpk2qBi",
	"FG4FOWjRpibXOiVRD5b8ijX31mifJHlXltHRRhPq2JSwVsk6tlUsfJr3/hJJ2D5rMB6aXhvhnFglOhv0",
	"tZM2rRGYhLpG72dBZZueoqY+tK1wK6jgu/SURdLYB8YPsHZh/IY2NjN6+mya1YswPQNl7ebu/ryQC9jt",
	"kXn0oosHDHefobGZZutBZAaOk1j3c871UijZZFLbQA/4S61nItN4yzzGcHRhcbcw0x+y6VJBHoZ9br/G",
	"c2Z3HFfzsDPZ3r0xU1l4SFX+BOx9Tx7vw2QqUp9rKh7J0YaymQm6eUBFwpKJREP+5Aj+Y7Tla7r14EH7",
	"Aw7PME5j1iAJqfyAmwrcfCY8u+ciyad9+kFrL/17J8ofpzj/X7Q6aFv2X1avsjM3Iu0oEet4dMsNtcEp",
	"qGBOZKuiUKYWam48VR/LTyV0V93vAAAA///qkjaHBwoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
