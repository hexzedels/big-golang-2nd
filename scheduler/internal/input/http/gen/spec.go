// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8yWQW/bPAyG/4rB7zsasbsVw+Zbt3VFgx0K5FgUg2IzjTJZciUqXVD4vw+Ukjit3Sbp",
	"imG3WJIpvg9fMn6A0tSN0ajJQfEArpxjLcLP819YepJG80NjTYOWJIatmdTSzbE6o/BkbC0ICpCaPpxC",
	"CrRqMD7iLVpoU5AVH1yvO7JS3/Lywkwvh3ccCUtHXOBIkHeDoe6N/Yl28J52G8pMF1gSHx+baV9waVHQ",
	"n+vlE3Yp1OCmEo6+HQvW6BIHozVipYzYTaOT2MH63+IMCvgv61yQrS2QTeIphmTxzkuLFRTXLG0bId0B",
	"0xPQ5XAzjPlLeLcP+0VKrxA8VOXJFgFqX7OuO48eWZv1WnPMNLSGQgqrMyEV7krZeijUdWbCxZIU703K",
	"OVZeoU3Ori4hhSVaFxoJTkb5KA86GtSikVDA+1E+Ogm0aB4yyhZmGn7cYrABsxHciOxhuEAa8z6/YEWN",
	"hNZBcc3YoGAVdgUpaFHHJNd1ikU9uOQ3XHPXGO1iSd7leWgDowl1SEo0jZJlSCtbuDgkukskYb3XYNxp",
	"XW2EtWIVcVboSiubOHtg4ssSnZt5lWxyCjV1vq6FXUEB36WjJEBjHxg3QO3KuA02NjM6+myq1VGa9khZ",
	"u7l93C9kPbY9mCdHXTxguMeExmaarBuRCZzGYj0+c6mXQskqkbrx9IRfTD0RicZ75hi2gwuzh4WZ/pBV",
	"GwNyM/TZfg3rTHcc5vmwM9nenTFjWHiKKn1Bdt+Tp32ZjCLmuUbxzBltKJkZr6snKKKWREQM6Yst+JfV",
	"5m/p1oMb7RUMLzB0Y1IhCancgJsy3Hxb7J1zAfJ5d/ygsRf/8iPy5xGn/0qtDpqW3efYm8zMTZF2KhHi",
	"OLTLDVpvFRQwJ2qKLFOmFGpuHBUf8085tDft7wAAAP//XGlPrDwKAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
