// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package gen

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List jobs
	// (GET /jobs)
	GetJobs(w http.ResponseWriter, r *http.Request, params GetJobsParams)
	// Create a new job
	// (POST /jobs)
	PostJobs(w http.ResponseWriter, r *http.Request)
	// Delete a job
	// (DELETE /jobs/{job_id})
	DeleteJobsJobId(w http.ResponseWriter, r *http.Request, jobId string)
	// Get job details
	// (GET /jobs/{job_id})
	GetJobsJobId(w http.ResponseWriter, r *http.Request, jobId string)
	// Get job executions
	// (GET /jobs/{job_id}/executions)
	GetJobsJobIdExecutions(w http.ResponseWriter, r *http.Request, jobId string, params GetJobsJobIdExecutionsParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List jobs
// (GET /jobs)
func (_ Unimplemented) GetJobs(w http.ResponseWriter, r *http.Request, params GetJobsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new job
// (POST /jobs)
func (_ Unimplemented) PostJobs(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a job
// (DELETE /jobs/{job_id})
func (_ Unimplemented) DeleteJobsJobId(w http.ResponseWriter, r *http.Request, jobId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get job details
// (GET /jobs/{job_id})
func (_ Unimplemented) GetJobsJobId(w http.ResponseWriter, r *http.Request, jobId string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get job executions
// (GET /jobs/{job_id}/executions)
func (_ Unimplemented) GetJobsJobIdExecutions(w http.ResponseWriter, r *http.Request, jobId string, params GetJobsJobIdExecutionsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetJobs operation middleware
func (siw *ServerInterfaceWrapper) GetJobs(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJobsParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJobs(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostJobs operation middleware
func (siw *ServerInterfaceWrapper) PostJobs(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostJobs(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteJobsJobId operation middleware
func (siw *ServerInterfaceWrapper) DeleteJobsJobId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "job_id" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "job_id", chi.URLParam(r, "job_id"), &jobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "job_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteJobsJobId(w, r, jobId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetJobsJobId operation middleware
func (siw *ServerInterfaceWrapper) GetJobsJobId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "job_id" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "job_id", chi.URLParam(r, "job_id"), &jobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "job_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJobsJobId(w, r, jobId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetJobsJobIdExecutions operation middleware
func (siw *ServerInterfaceWrapper) GetJobsJobIdExecutions(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "job_id" -------------
	var jobId string

	err = runtime.BindStyledParameterWithOptions("simple", "job_id", chi.URLParam(r, "job_id"), &jobId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "job_id", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetJobsJobIdExecutionsParams

	// ------------- Optional query parameter "worker_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "worker_id", r.URL.Query(), &params.WorkerId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "worker_id", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetJobsJobIdExecutions(w, r, jobId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/jobs", wrapper.GetJobs)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/jobs", wrapper.PostJobs)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/jobs/{job_id}", wrapper.DeleteJobsJobId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/jobs/{job_id}", wrapper.GetJobsJobId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/jobs/{job_id}/executions", wrapper.GetJobsJobIdExecutions)
	})

	return r
}

type GetJobsRequestObject struct {
	Params GetJobsParams
}

type GetJobsResponseObject interface {
	VisitGetJobsResponse(w http.ResponseWriter) error
}

type GetJobs200JSONResponse []Job

func (response GetJobs200JSONResponse) VisitGetJobsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostJobsRequestObject struct {
	Body *PostJobsJSONRequestBody
}

type PostJobsResponseObject interface {
	VisitPostJobsResponse(w http.ResponseWriter) error
}

type PostJobs201JSONResponse string

func (response PostJobs201JSONResponse) VisitPostJobsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostJobs400Response struct {
}

func (response PostJobs400Response) VisitPostJobsResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type DeleteJobsJobIdRequestObject struct {
	JobId string `json:"job_id"`
}

type DeleteJobsJobIdResponseObject interface {
	VisitDeleteJobsJobIdResponse(w http.ResponseWriter) error
}

type DeleteJobsJobId204Response struct {
}

func (response DeleteJobsJobId204Response) VisitDeleteJobsJobIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteJobsJobId404Response struct {
}

func (response DeleteJobsJobId404Response) VisitDeleteJobsJobIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetJobsJobIdRequestObject struct {
	JobId string `json:"job_id"`
}

type GetJobsJobIdResponseObject interface {
	VisitGetJobsJobIdResponse(w http.ResponseWriter) error
}

type GetJobsJobId200JSONResponse Job

func (response GetJobsJobId200JSONResponse) VisitGetJobsJobIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetJobsJobId404Response struct {
}

func (response GetJobsJobId404Response) VisitGetJobsJobIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type GetJobsJobIdExecutionsRequestObject struct {
	JobId  string `json:"job_id"`
	Params GetJobsJobIdExecutionsParams
}

type GetJobsJobIdExecutionsResponseObject interface {
	VisitGetJobsJobIdExecutionsResponse(w http.ResponseWriter) error
}

type GetJobsJobIdExecutions200JSONResponse []Execution

func (response GetJobsJobIdExecutions200JSONResponse) VisitGetJobsJobIdExecutionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// List jobs
	// (GET /jobs)
	GetJobs(ctx context.Context, request GetJobsRequestObject) (GetJobsResponseObject, error)
	// Create a new job
	// (POST /jobs)
	PostJobs(ctx context.Context, request PostJobsRequestObject) (PostJobsResponseObject, error)
	// Delete a job
	// (DELETE /jobs/{job_id})
	DeleteJobsJobId(ctx context.Context, request DeleteJobsJobIdRequestObject) (DeleteJobsJobIdResponseObject, error)
	// Get job details
	// (GET /jobs/{job_id})
	GetJobsJobId(ctx context.Context, request GetJobsJobIdRequestObject) (GetJobsJobIdResponseObject, error)
	// Get job executions
	// (GET /jobs/{job_id}/executions)
	GetJobsJobIdExecutions(ctx context.Context, request GetJobsJobIdExecutionsRequestObject) (GetJobsJobIdExecutionsResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetJobs operation middleware
func (sh *strictHandler) GetJobs(w http.ResponseWriter, r *http.Request, params GetJobsParams) {
	var request GetJobsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetJobs(ctx, request.(GetJobsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetJobs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetJobsResponseObject); ok {
		if err := validResponse.VisitGetJobsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostJobs operation middleware
func (sh *strictHandler) PostJobs(w http.ResponseWriter, r *http.Request) {
	var request PostJobsRequestObject

	var body PostJobsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostJobs(ctx, request.(PostJobsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostJobs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostJobsResponseObject); ok {
		if err := validResponse.VisitPostJobsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteJobsJobId operation middleware
func (sh *strictHandler) DeleteJobsJobId(w http.ResponseWriter, r *http.Request, jobId string) {
	var request DeleteJobsJobIdRequestObject

	request.JobId = jobId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteJobsJobId(ctx, request.(DeleteJobsJobIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteJobsJobId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteJobsJobIdResponseObject); ok {
		if err := validResponse.VisitDeleteJobsJobIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetJobsJobId operation middleware
func (sh *strictHandler) GetJobsJobId(w http.ResponseWriter, r *http.Request, jobId string) {
	var request GetJobsJobIdRequestObject

	request.JobId = jobId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetJobsJobId(ctx, request.(GetJobsJobIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetJobsJobId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetJobsJobIdResponseObject); ok {
		if err := validResponse.VisitGetJobsJobIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetJobsJobIdExecutions operation middleware
func (sh *strictHandler) GetJobsJobIdExecutions(w http.ResponseWriter, r *http.Request, jobId string, params GetJobsJobIdExecutionsParams) {
	var request GetJobsJobIdExecutionsRequestObject

	request.JobId = jobId
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetJobsJobIdExecutions(ctx, request.(GetJobsJobIdExecutionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetJobsJobIdExecutions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetJobsJobIdExecutionsResponseObject); ok {
		if err := validResponse.VisitGetJobsJobIdExecutionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}
